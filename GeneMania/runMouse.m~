% runGeneMANIA.m   --> this is a sample script for creating two networks
% and ruuning GeneMANIA using these networks and a list of positive genes. 
% 
% %% the input files are
% Zhang_expData.txt which is microarray data 
% sage_expData_sumTagCounts.txt
% %%%%
% %% 1. import the two files: 
% 
% zhang = importdata('Zhang_expData.txt');
% sage = importdata('sage_expData_sumTagCounts.txt');
% in these two data files genes are the rows and features are the columns.

% 2. make two association networks in a cell structure with fields data,
% collabels, rowlabels --> this is done so that we can use the
% combineKernel.m function to combine the networks (to make sure they have
% the same gene order)
% 
% K = 50; % set the number of neigbours 
% 
% network{1}.data = makeAssociationKernel(zhang.data', K);
% network{1}.rowlabels = zhang.textdata(2:end,1);
% network{1}.collabels = network{1}.rowlabels;
% 
% network{2}.data = makeAssociationKernel(sage.data',K);
% network{2}.rowlabels = sage.textdata(2:end,1);
% network{2}.collabels = network{2}.rowlabels;
% 
numNetworks = 6;
nnode = 6311;
nlabel = 4240;
% numNetworks = 1;
% nlabel = 16662;
% nnode = 13708;
%% 3. normalize the networks
for ii = 1:numNetworks
    file_name = ['/home/swang141/research/Bio Network Ontology Prediction/GoPrediction/Data/HumanGraph/noisoppi'+num2str(ii)+'.txt'];
    [g1,g2,f1] = textread(file_name, '%d%d');
    n = nnode;
    A = sparse(g1,g2,f1,n,n);
    kernels{ii} = normalizeKernel(A);
end
% 
% 
% 
[g1,g2] = textread('/home/swang141/research/Bio Network Ontology Prediction/GoPrediction/Data/HumanGraph/noisonewAnotationAllNode.txt', '%d%d');
labels = sparse(g1,g2,true,nlabel,nnode);
labels = labels*2-1;

size(labels)
    

% 7. get area under the AUC for prediction, as well as the scores
pp = randperm(nnode); % this is the permutation index for doing the cross-validation;
nFolds = 3; % number of cross-validation folds
anss = 0;
ncount = 0;
score_m=zeros(nnode,nlabel);
size(score_m)
remove_list=[];
for ii=1:nlabel
    npos = length(find(labels(:,ii)==1));
     if (npos<3 || npos>300)
         continue
     end
    try
    [areas, r, b, weights] = predictClassesCV(labels(:,ii), kernels, nFolds, pp);
    catch
        remove_list = [remove_list,ii];
        continue
    end
    score_m(1:length(b),ii) = b;
    areas = areas(~isnan(areas));
    if size(areas,2)>0
        anss = anss + mean(areas);
        ncount = ncount + 1;
        fprintf('auc=%f, ncount=%d, mic_auc=%f, npos=%d\n',mean(areas),ncount,anss/ncount,npos);
    end
%     score_v = score_m(:,1:ii);
%     label_v = labels(:,1:ii);
%     score_v=score_v(:);
%     label_v = label_v(:);
%     if mod(ii,100)==0
%         mauc = calcROCarea(score_v, (label_v+1)/2);
%         fprintf('mac_auc=%f, ii=%d\n',mauc,ii);
%     end
end
size(remove_list)
mauc = calcROCarea(score_v, ((label_v+1)/2));
fprintf('mac_auc = %f \n',mauc);




